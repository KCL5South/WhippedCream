<#@ include file="Includes.ttinclude"#>
<#@ include file="ArgumentNotNull.ttinclude"#>
<#@ include file="CodeStringGenerator.ttinclude"#>
<#@ include file="EdmMetadataLoader.ttinclude"#>
<#@ include file="ResourceManager.ttinclude"#>
<#@ include file="TemplateId.ttinclude"#>
<#@ include file="TypeMapper.ttinclude"#>
<#
//----  READ ME ----
// This template needs reference to the Mono.TextTemplating.Utility.dll
// and the Mono.TextTemplating.Utility namespace needs to be imported
// Example:
//  assembly name="<PathTo>\Mono.TextTemplating.Utility.dll"
//  import namespace="Mono.TextTemplating.Utility.EntityFramework"
//------------------

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
var itemCollection = loader.CreateEdmItemCollection(inputFile);
var modelNamespace = loader.GetModelNamespace(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return string.Empty;
}
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#

var firstEntity = itemCollection.OfType<StructuralType>().FirstOrDefault();
var codeNamespace = firstEntity == null ? string.Empty : firstEntity.NamespaceName;
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#
    PushIndent("	");
}

#>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Data.Services;
using Microsoft.Practices.Unity;
using System.Data.Services.Common;
using System.ServiceModel.Web;
using WhippedCream;

[System.ServiceModel.ServiceBehavior(IncludeExceptionDetailInFaults = true)]
public partial class <#=code.Escape(container)#>DataService : DataService<<#=string.Format("I{0}", code.Escape(container))#>>
{
	public IUnityContainer Container { get; private set; }

	public <#= code.Escape(container)#>DataService(IUnityContainer container)
	{
		if(container == null)
			throw new ArgumentNullException("container");

		Container = container;
	}

	protected override <#=string.Format("I{0}", code.Escape(container))#> CreateDataSource()
    {
		IRepositoryFactory factory = Container.Resolve<IRepositoryFactory>();
        return factory.CreateRepository<<#=string.Format("I{0}", code.Escape(container))#>>();
    }

    protected override void HandleException(HandleExceptionArgs args)
    {
        if (args.Exception is DataServiceException)
            return;

        // Return a new DataServiceException as "400: bad request."
        if (args.Exception != null && args.Exception.InnerException != null)
        {
            args.Exception =
                new DataServiceException(400,
                    args.Exception.InnerException.Message);
        }
        else if (args.Exception != null)
        {
            args.Exception = new DataServiceException(400, args.Exception.Message);
        }
        else
        {
            args.Exception = new DataServiceException(400, "Unknown");
        }
    }

    protected override void OnStartProcessingRequest(ProcessRequestArgs args)
    {
		if(Container.Resolve<IWhippedCreamDataLayer>().State == DataLayerState.Testing)
			base.OnStartProcessingRequest(args);
		else
			throw new System.Web.HttpException(401, "");
    }

	public void Dispose() { }

    public static void InitializeService(DataServiceConfiguration config)
    {
        config.UseVerboseErrors = true;
        config.DataServiceBehavior.MaxProtocolVersion = DataServiceProtocolVersion.V3;
        config.SetEntitySetAccessRule("*", EntitySetRights.All);
		config.SetServiceOperationAccessRule("*", ServiceOperationRights.All);
    }

<#
	foreach (var edmFunction in container.FunctionImports)
    {
        WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: false);
    }
#>
}
<#

if (!String.IsNullOrEmpty(codeNamespace))
{
    PopIndent();
#>
}
<#
}
#>

<#+
private void WriteFunctionImport(TypeMapper typeMapper, CodeStringGenerator codeStringGenerator, EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
{
#>
	[WebGet]
    <#=codeStringGenerator.FunctionMethodForDataService(edmFunction, modelNamespace, includeMergeOption)#>
	{
		<#=codeStringGenerator.ExecuteFunctionForDataService(edmFunction, modelNamespace, includeMergeOption)#>
	}
<#+
}

public partial class CodeStringGenerator
{
	public string FunctionMethodForDataService(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "public {0} {1}({2})",
            returnType == null ? "int" : "IEnumerable<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }

	public string ExecuteFunctionForDataService(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var callParams = String.Join(", ", parameters.Select(p => p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            callParams = ", mergeOption" + callParams;
        }
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return this.CurrentDataSource.{0}({1});",
			_code.Escape(edmFunction),
            callParams);
    }
}

#>