<#@ include file="Includes.ttinclude"#>
<#@ include file="ArgumentNotNull.ttinclude"#>
<#@ include file="CodeStringGenerator.ttinclude"#>
<#@ include file="EdmMetadataLoader.ttinclude"#>
<#@ include file="ResourceManager.ttinclude"#>
<#@ include file="TemplateId.ttinclude"#>
<#@ include file="TypeMapper.ttinclude"#>

<#
//----  READ ME ----
// This template needs reference to the Mono.TextTemplating.Utility.dll
// and the Mono.TextTemplating.Utility namespace needs to be imported
// Example:
//  assembly name="<PathTo>\Mono.TextTemplating.Utility.dll"
//  import namespace="Mono.TextTemplating.Utility.EntityFramework"
//------------------

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
var itemCollection = loader.CreateEdmItemCollection(inputFile);
var modelNamespace = loader.GetModelNamespace(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return string.Empty;
}
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#

var firstEntity = itemCollection.OfType<StructuralType>().FirstOrDefault();
var codeNamespace = firstEntity == null ? string.Empty : firstEntity.NamespaceName;
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#
    PushIndent("    ");
}

#>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Data.Services;
using Microsoft.Practices.Unity;
using System.Data.Services.Common;
using System.ServiceModel.Web;
using System.Data.Services.Client;
using WhippedCream;

public partial class <#=code.Escape(container)#>DataServiceContext : DataServiceContext, <#="I" + code.Escape(container)#>, IRepositoryContext
{
    public <#= code.Escape(container)#>DataServiceContext(IUrlService urlService) : base(urlService.GetServiceUri("<#= code.Escape(container) #>")) { }

<#
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
    <#=codeStringGenerator.QueryableSet(entitySet)#>
<#
    }
    foreach (var edmFunction in container.FunctionImports)
    {
        WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: false);
    }
#>
    
    #region System.IDisposable Members

    public void Dispose() { }

    #endregion

    #region IRepositoryContext Members

    void IRepositoryContext.SaveChanges()
    {
        SaveChanges();
    }

    void IRepositoryContext.LoadProperty(object entity, string propertyName)
    {
        LoadProperty(entity, propertyName);
    }

    #endregion
}
<#

if (!String.IsNullOrEmpty(codeNamespace))
{
    PopIndent();
#>
}
<#
}
#>

<#+
private void WriteFunctionImport(TypeMapper typeMapper, CodeStringGenerator codeStringGenerator, EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
{
#>

    <#=codeStringGenerator.FunctionMethodForDataService(edmFunction, modelNamespace, includeMergeOption)#>
    {
        ICollection<UriOperationParameter> parameters = new List<UriOperationParameter>();
<#+
        codeStringGenerator.WriteFunctionParametersDataServiceContext(edmFunction, WriteFunctionParameter);
#>
        <#=codeStringGenerator.ExecuteFunctionForDataService(edmFunction, modelNamespace, includeMergeOption)#>;
    }
<#+
}

public void WriteFunctionParameter(string parameterName, string name, string value)
{
#> 
        if(<#=value#> != null) { parameters.Add(new UriOperationParameter(<#=name#>, <#=value#>)); }
<#+
}

public partial class CodeStringGenerator
{
    public string QueryableSet(EntitySet entitySet)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "public IQueryable<{0}> {1} {{ get {{ return this.CreateQuery<{0}>(\"{1}\"); }} }}",
            _typeMapper.GetTypeName(entitySet.ElementType),
            _code.Escape(entitySet));
    }

    public string FunctionMethodForDataService(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "public {0} {1}({2})",
            returnType == null ? "int" : "IEnumerable<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }

    public string ExecuteFunctionForDataService(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var callParams = String.Join(", ", parameters.Select(p => p.LocalVariableName).ToArray());
        if (includeMergeOption)
        {
            callParams = ", mergeOption" + callParams;
        }
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return this.Execute<{0}>(new Uri(\"{1}\", UriKind.Relative), \"GET\", {2}, parameters.ToArray()){3}",
            returnType ==  null ? "int" : _typeMapper.GetTypeName(returnType, modelNamespace),
            _code.Escape(edmFunction),
            returnType == null ? "true" : "false",
            returnType == null ? ".First()" : "");
    }
    
    public void WriteFunctionParametersDataServiceContext(EdmFunction edmFunction, Action<string, string, string> writeParameter)
    {
        var parameters = FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
        foreach (var parameter in parameters.Where(p => p.NeedsLocalVariable))
        {
            writeParameter(parameter.LocalVariableName, string.Format("\"{0}\"", parameter.FunctionParameterName), parameter.FunctionParameterName);
        }
    }
}

#>
