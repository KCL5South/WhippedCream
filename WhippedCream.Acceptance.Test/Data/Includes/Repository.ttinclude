<#@ include file="Includes.ttinclude"#>
<#@ include file="ArgumentNotNull.ttinclude"#>
<#@ include file="CodeStringGenerator.ttinclude"#>
<#@ include file="EdmMetadataLoader.ttinclude"#>
<#@ include file="ResourceManager.ttinclude"#>
<#@ include file="TemplateId.ttinclude"#>
<#@ include file="TypeMapper.ttinclude"#>

<#
//----  READ ME ----
// This template needs reference to the Mono.TextTemplating.Utility.dll
// and the Mono.TextTemplating.Utility namespace needs to be imported
// Example:
//  assembly name="<PathTo>\Mono.TextTemplating.Utility.dll"
//  import namespace="Mono.TextTemplating.Utility.EntityFramework"
//------------------

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
var itemCollection = loader.CreateEdmItemCollection(inputFile);
var modelNamespace = loader.GetModelNamespace(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return string.Empty;
}
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#

var firstEntity = itemCollection.OfType<StructuralType>().FirstOrDefault();
var codeNamespace = firstEntity == null ? string.Empty : firstEntity.NamespaceName;
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#
    PushIndent("	");
}

#>
using System;
using System.Linq;
using System.Collections.Generic;
using WhippedCream;

[Repository(DataLayerState.Live, typeof(<#=code.Escape(container)#>))]
[Repository(DataLayerState.Testing, typeof(<#=code.Escape(container)#>InMemoryRepo))]
[RepositoryContext(DataLayerState.Live, typeof(<#=code.Escape(container)#>))]
[RepositoryContext(DataLayerState.Testing, typeof(<#=code.Escape(container)#>DataServiceContext))]
[RepositoryServicePath("<#= code.Escape(container) #>")]
[RepositoryServiceType(typeof(<#=code.Escape(container)#>DataService))]
public interface <#= "I" + code.Escape(container)#> : IRepository
{
<#
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
    <#=codeStringGenerator.QueryableSet(entitySet)#>
<#
    }

    foreach (var edmFunction in container.FunctionImports)
    {
        WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: false);
    }
#>
}
<#

if (!String.IsNullOrEmpty(codeNamespace))
{
    PopIndent();
#>
}
<#
}
#>
<#+

private void WriteFunctionImport(TypeMapper typeMapper, CodeStringGenerator codeStringGenerator, EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
{
#>

    <#=codeStringGenerator.FunctionMethodForRepository(edmFunction, modelNamespace, includeMergeOption)#>;
<#+
}

public partial class CodeStringGenerator
{
	public string QueryableSet(EntitySet entitySet)
	{
        return string.Format(
            CultureInfo.InvariantCulture,
            "IQueryable<{0}> {1} {{ get; }}",
            _typeMapper.GetTypeName(entitySet.ElementType),
            _code.Escape(entitySet));
	}

	public string FunctionMethodForRepository(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1}({2})",
            returnType == null ? "int" : "IEnumerable<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }
}
#>