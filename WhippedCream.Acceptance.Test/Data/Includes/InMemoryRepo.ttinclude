<#@ include file="Includes.ttinclude"#>
<#@ include file="ArgumentNotNull.ttinclude"#>
<#@ include file="CodeStringGenerator.ttinclude"#>
<#@ include file="EdmMetadataLoader.ttinclude"#>
<#@ include file="ResourceManager.ttinclude"#>
<#@ include file="TemplateId.ttinclude"#>
<#@ include file="TypeMapper.ttinclude"#>

<#
//----  READ ME ----
// This template needs reference to the Mono.TextTemplating.Utility.dll
// and the Mono.TextTemplating.Utility namespace needs to be imported
// Example:
//  assembly name="<PathTo>\Mono.TextTemplating.Utility.dll"
//  import namespace="Mono.TextTemplating.Utility.EntityFramework"
//------------------

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
var itemCollection = loader.CreateEdmItemCollection(inputFile);
var modelNamespace = loader.GetModelNamespace(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return string.Empty;
}
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#

var firstEntity = itemCollection.OfType<StructuralType>().FirstOrDefault();
var codeNamespace = firstEntity == null ? string.Empty : firstEntity.NamespaceName;
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#
    PushIndent("	");
}

#>
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Practices.Unity;
using WhippedCream.InMemoryDataLayer;
using WhippedCream.DataServiceDataLayer;

public partial class <#= code.Escape(container)#>InMemoryRepo : WhippedCreamUpdatableContext, <#=string.Format("I{0}", code.Escape(container))#>
{
	public IInMemoryPersistentMedium Medium { get; private set; }

	public <#= code.Escape(container)#>InMemoryRepo(IUnityContainer container, IInMemoryPersistentMedium medium)
		: base(container)
	{
		if(medium == null)
			throw new ArgumentNullException("medium");

		Medium = medium;

<#
	foreach (var edmFunction in container.FunctionImports)
    {
        WriteSetupCalls(typeMapper, codeStringGenerator, edmFunction, modelNamespace, false);
    }
#>
	}

<#	foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
    <#=codeStringGenerator.QueryableSet(entitySet, container)#>
<#
    }
	foreach (var edmFunction in container.FunctionImports)
    {
        WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, false, container);
    }
#>

	partial void ResolveRelationships(ODataOperation operation, object entity);

	#region DataServiceUpdatableContext Overriden Members

	public override System.Type GetType(string containerName, string fullTypeName)
	{
<#	foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
	{
#>
		<#=codeStringGenerator.GetType_Entity(entity)#>
<#
	}
	foreach (var complex in typeMapper.GetItemsToGenerate<ComplexType>(itemCollection))
	{
#>
		<#=codeStringGenerator.GetType_Complex(complex)#>
<#
	}
#>
		return null;
	}

	public override void SaveEntity(ODataOperation operation, object entity)
	{
		if(operation == ODataOperation.Insert)
		{
<#	foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
	{
#>
			<#=codeStringGenerator.SaveEntityInsert(entitySet, container)#>
<#
	}
#>
		}
		else if(operation == ODataOperation.Delete)
		{
<#	foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
	{
#>
			<#=codeStringGenerator.SaveEntityDelete(entitySet, container)#>
<#
	}
#>
		}
		
		ResolveRelationships(operation, entity);
	}

	#endregion

	#region System.IDisposable Members

	public void Dispose() { }

	#endregion
}
<#

if (!String.IsNullOrEmpty(codeNamespace))
{
    PopIndent();
#>
}
<#
}
#>

<#+
private void WriteFunctionImport(TypeMapper typeMapper, CodeStringGenerator codeStringGenerator, EdmFunction edmFunction, string modelNamespace, bool includeMergeOption, EntityContainer container)
{
#>

	<#=codeStringGenerator.CreateFunctionMethodDelegate(edmFunction, modelNamespace, container)#>;
	<#=codeStringGenerator.FunctionMethodDelegates(edmFunction, modelNamespace, includeMergeOption, container)#>;
	<#=codeStringGenerator.FunctionMethodSetup(edmFunction, modelNamespace, includeMergeOption, container)#>;
    <#=codeStringGenerator.FunctionMethodForInMemoryRepository(edmFunction, modelNamespace, includeMergeOption)#>
	{
		<#=codeStringGenerator.FunctionMethodForInMemoryRepositoryContent(edmFunction, modelNamespace, includeMergeOption)#>
	}
<#+
}

private void WriteSetupCalls(TypeMapper typeMapper, CodeStringGenerator codeStringGenerator, EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
{
#>
		<#=codeStringGenerator.FunctionMethodSetupCalls(edmFunction, modelNamespace, includeMergeOption)#>;
<#+
}

public partial class CodeStringGenerator
{
	public string QueryableSet(EntitySet entitySet, EntityContainer container)
	{
        return string.Format(
            CultureInfo.InvariantCulture,
            "public IQueryable<{0}> {1} {{ get {{ return Medium.GetStorage<{2}, {0}>().AsQueryable(); }} }}",
            _typeMapper.GetTypeName(entitySet.ElementType),
            _code.Escape(entitySet),
			string.Format("I{0}", _code.Escape(container)));
	}

	public string CreateFunctionMethodDelegate(EdmFunction edmFunction, string modelNamespace, EntityContainer container)
	{
		var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);
        var thisParameter = new string[] { _code.Escape(container) + "InMemoryRepo repo" };

        var paramList = String.Join(", ", thisParameter.Concat(parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray()));

        return string.Format(
            CultureInfo.InvariantCulture,
            "protected delegate {0} {1}Delegate({2})",
            returnType == null ? "int" : "IEnumerable<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
	}

	public string FunctionMethodDelegates(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption, EntityContainer container)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "private {0}Delegate _{0} = null",
            _code.Escape(edmFunction));
    }

	public string FunctionMethodForInMemoryRepository(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "public {0} {1}({2})",
            returnType == null ? "int" : "IEnumerable<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }

	public string FunctionMethodSetup(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption, EntityContainer container)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "partial void {0}_Setup()",
            _code.Escape(edmFunction));
    }

	public string FunctionMethodForInMemoryRepositoryContent(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
		var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterName).ToArray());
		if(paramList == string.Empty)
			paramList = "this";
		else 
			paramList = string.Format("this, {0}", paramList);
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "if(_{0} != null) {{ return _{0}({1}); }} else {{ return {2}; }}",
            _code.Escape(edmFunction),
			paramList,
            returnType == null ? "default(int)" : "Enumerable.Empty<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">()");
    }

	public string FunctionMethodSetupCalls(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0}_Setup()",
            _code.Escape(edmFunction));
    }

	public string GetType_Entity(EntityType entity)
	{
		return string.Format(
			CultureInfo.InvariantCulture,
			"if(fullTypeName == typeof({0}).ToString()) return typeof({0});",
			_code.Escape(entity));
	}

	public string GetType_Complex(ComplexType complex)
	{
		return string.Format(
			CultureInfo.InvariantCulture,
			"if(fullTypeName == typeof({0}).ToString()) return typeof({0});",
			_code.Escape(complex));
	}

	public string SaveEntityInsert(EntitySet entitySet, EntityContainer container)
	{
		return string.Format(
			CultureInfo.InvariantCulture,
			"if(entity.GetType() == typeof({0})) {{ Medium.GetStorage<I{1}, {0}>().Add(entity as {0}); }}",
			_typeMapper.GetTypeName(entitySet.ElementType),
			_code.Escape(container));
	}

	public string SaveEntityDelete(EntitySet entitySet, EntityContainer container)
	{
		return string.Format(
			CultureInfo.InvariantCulture,
			"if(entity.GetType() == typeof({0})) {{ Medium.GetStorage<I{1}, {0}>().Remove(entity as {0}); }}",
			_typeMapper.GetTypeName(entitySet.ElementType),
			_code.Escape(container));
	}
}

#>