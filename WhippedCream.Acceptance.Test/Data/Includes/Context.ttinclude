<#@ include file="Includes.ttinclude"#>
<#@ include file="ArgumentNotNull.ttinclude"#>
<#@ include file="CodeStringGenerator.ttinclude"#>
<#@ include file="EdmMetadataLoader.ttinclude"#>
<#@ include file="ResourceManager.ttinclude"#>
<#@ include file="TemplateId.ttinclude"#>
<#@ include file="TypeMapper.ttinclude"#>

<#
//----  READ ME ----
// This template needs reference to the Mono.TextTemplating.Utility.dll
// and the Mono.TextTemplating.Utility namespace needs to be imported
// Example:
//  assembly name="<PathTo>\Mono.TextTemplating.Utility.dll"
//  import namespace="Mono.TextTemplating.Utility.EntityFramework"
//------------------

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
var itemCollection = loader.CreateEdmItemCollection(inputFile);
var modelNamespace = loader.GetModelNamespace(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return string.Empty;
}
#>//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#

var firstEntity = itemCollection.OfType<StructuralType>().FirstOrDefault();
var codeNamespace = firstEntity == null ? string.Empty : firstEntity.NamespaceName;
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#
    PushIndent("    ");
}

#>
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Linq;
using WhippedCream;

<#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#> : DbContext, <#="I" + code.Escape(container)#>, IRepositoryContext
{
	private static ObjectContext GetContext(WhippedCream.EntityFrameworkDataLayer.IEntityFrameworkInitializerMap map)
	{
		var initializer = map.GetInitializer<<#="I" + code.Escape(container)#>>();
		ObjectContext result = new ObjectContext(initializer.GenerateConnectionString());
		result.DefaultContainerName = initializer.DefaultContainerName;
		return result;
	}

    public <#=code.Escape(container)#>(WhippedCream.EntityFrameworkDataLayer.IEntityFrameworkInitializerMap map)
        : base(GetContext(map), true)
    {
<#
if (!loader.IsLazyLoadingEnabled(container))
{
#>
        this.Configuration.LazyLoadingEnabled = false;
<#
}
#>
		this.Configuration.ProxyCreationEnabled = false;
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

<#
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
    <#=codeStringGenerator.DbSet(entitySet)#>
<#
    }

    foreach (var edmFunction in container.FunctionImports)
    {
        WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: false);
    }
#>

	#region <#="I" + code.Escape(container)#> Members

<#
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
    <#=codeStringGenerator.QueryableSet(entitySet, container)#>
<#
    }
	foreach (var edmFunction in container.FunctionImports)
    {
        WriteFunctionImportExplicitInterface(typeMapper, codeStringGenerator, edmFunction, modelNamespace, false, container);
    }
#>

	#endregion
    
    #region IRepositoryContext Members

	void IRepositoryContext.AddObject(string entitySetName, object entity)
	{
		(this as IObjectContextAdapter).ObjectContext.AddObject(entitySetName, entity);
	}

	void IRepositoryContext.DeleteObject(object entity)
	{
		(this as IObjectContextAdapter).ObjectContext.DeleteObject(entity);
	}

    void IRepositoryContext.SaveChanges()
    {
    	SaveChanges();
    }

	void IRepositoryContext.LoadProperty(object entity, string propertyName)
	{
		(this as IObjectContextAdapter).ObjectContext.LoadProperty(entity, propertyName);
	}
    
    #endregion
}
<#

if (!String.IsNullOrEmpty(codeNamespace))
{
    PopIndent();
#>
}
<#
}
#>
<#+

private void WriteFunctionImport(TypeMapper typeMapper, CodeStringGenerator codeStringGenerator, EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
{
    if (typeMapper.IsComposable(edmFunction))
    {
#>

    [EdmFunction("<#=edmFunction.NamespaceName#>", "<#=edmFunction.Name#>")]
    <#=codeStringGenerator.ComposableFunctionMethod(edmFunction, modelNamespace)#>
    {
<#+
        codeStringGenerator.WriteFunctionParameters(edmFunction, WriteFunctionParameter);
#>
        <#=codeStringGenerator.ComposableCreateQuery(edmFunction, modelNamespace)#>
    }
<#+
    }
    else
    {
#>

    <#=codeStringGenerator.FunctionMethod(edmFunction, modelNamespace, includeMergeOption)#>
    {
<#+
        codeStringGenerator.WriteFunctionParameters(edmFunction, WriteFunctionParameter);
#>
        <#=codeStringGenerator.ExecuteFunction(edmFunction, modelNamespace, includeMergeOption)#>
    }
<#+
        if (typeMapper.GenerateMergeOptionFunction(edmFunction, includeMergeOption))
        {
            WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: true);
        }
    }
}



private void WriteFunctionImportExplicitInterface(TypeMapper typeMapper, CodeStringGenerator codeStringGenerator, EdmFunction edmFunction, string modelNamespace, bool includeMergeOption, EntityContainer container)
{
    if (typeMapper.IsComposable(edmFunction))
    {
#>

    [EdmFunction("<#=edmFunction.NamespaceName#>", "<#=edmFunction.Name#>")]
    <#=codeStringGenerator.ComposableFunctionMethod(edmFunction, modelNamespace)#>
    {
<#+
        codeStringGenerator.WriteFunctionParameters(edmFunction, WriteFunctionParameter);
#>
        <#=codeStringGenerator.ComposableCreateQuery(edmFunction, modelNamespace)#>
    }
<#+
    }
    else
    {
#>

    <#=codeStringGenerator.FunctionMethodExplicitInterface(edmFunction, modelNamespace, includeMergeOption, container)#>
    {
        <#=codeStringGenerator.ExecuteFunctionExplicitInterface(edmFunction, modelNamespace, includeMergeOption)#>
    }
<#+
    }
}

public void WriteFunctionParameter(string name, string isNotNull, string notNullInit, string nullInit)
{
#>
        var <#=name#> = <#=isNotNull#> ?
            <#=notNullInit#> :
            <#=nullInit#>;

<#+
}

public partial class CodeStringGenerator
{
	public string QueryableSet(EntitySet entitySet, EntityContainer container)
	{
        return string.Format(
            CultureInfo.InvariantCulture,
            "IQueryable<{0}> {1}.{2} {{ get {{ return {2}.AsQueryable(); }} }}",
            _typeMapper.GetTypeName(entitySet.ElementType),
			"I" + _code.Escape(container),
            _code.Escape(entitySet));
	}
    
    public string FunctionMethodExplicitInterface(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption, EntityContainer container)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1}.{2}({3})",
            returnType == null ? "int" : "IEnumerable<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
			string.Format("I{0}", _code.Escape(container)),
            _code.Escape(edmFunction),
            paramList);
    }
    
    public string ExecuteFunctionExplicitInterface(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var callParams = String.Join(", ", parameters.Select(p => p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            callParams = ", mergeOption" + callParams;
        }
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return {0}({1});",
			_code.Escape(edmFunction),
            callParams);
    }
}
#>