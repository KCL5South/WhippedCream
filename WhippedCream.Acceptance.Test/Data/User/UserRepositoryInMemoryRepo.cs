




//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WhippedCream.Data.User
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using Microsoft.Practices.Unity;
	using WhippedCream.InMemoryDataLayer;
	using WhippedCream.DataServiceDataLayer;
	
	public partial class UserRepositoryInMemoryRepo : WhippedCreamUpdatableContext, IUserRepository
	{
		public IInMemoryPersistentMedium Medium { get; private set; }
	
		public UserRepositoryInMemoryRepo(IUnityContainer container, IInMemoryPersistentMedium medium)
			: base(container)
		{
			if(medium == null)
				throw new ArgumentNullException("medium");
	
			Medium = medium;
	
			QueryAwards_Setup();
			MultiplyByTwo_Setup();
			MultiplyByTwoQuiet_Setup();
		}
	
	    public IQueryable<User> Users { get { return Medium.GetStorage<IUserRepository, User>().AsQueryable(); } }
	    public IQueryable<Address> Addresses { get { return Medium.GetStorage<IUserRepository, Address>().AsQueryable(); } }
	    public IQueryable<AgentId> AgentIds { get { return Medium.GetStorage<IUserRepository, AgentId>().AsQueryable(); } }
	    public IQueryable<ContactNumber> ContactNumbers { get { return Medium.GetStorage<IUserRepository, ContactNumber>().AsQueryable(); } }
	    public IQueryable<EMailAddress> EMailAddresses { get { return Medium.GetStorage<IUserRepository, EMailAddress>().AsQueryable(); } }
	    public IQueryable<Preference> Preferences { get { return Medium.GetStorage<IUserRepository, Preference>().AsQueryable(); } }
	    public IQueryable<Website> Websites { get { return Medium.GetStorage<IUserRepository, Website>().AsQueryable(); } }
	    public IQueryable<AgentAgencyAssociation> AgentAgencyAssociations { get { return Medium.GetStorage<IUserRepository, AgentAgencyAssociation>().AsQueryable(); } }
	    public IQueryable<Awards> Awards { get { return Medium.GetStorage<IUserRepository, Awards>().AsQueryable(); } }
	    public IQueryable<Files> Files { get { return Medium.GetStorage<IUserRepository, Files>().AsQueryable(); } }
	    public IQueryable<FilesFileData> FilesFileDatas { get { return Medium.GetStorage<IUserRepository, FilesFileData>().AsQueryable(); } }
	    public IQueryable<FilesWizardInfo> FilesWizardInfoes { get { return Medium.GetStorage<IUserRepository, FilesWizardInfo>().AsQueryable(); } }
	    public IQueryable<LoginEntry> LoginEntries { get { return Medium.GetStorage<IUserRepository, LoginEntry>().AsQueryable(); } }
	    public IQueryable<Badges> Badges { get { return Medium.GetStorage<IUserRepository, Badges>().AsQueryable(); } }
	    public IQueryable<MultiplyByTwoResult> MultiplyByTwoResults { get { return Medium.GetStorage<IUserRepository, MultiplyByTwoResult>().AsQueryable(); } }
	
		protected delegate IEnumerable<Awards> QueryAwardsDelegate(UserRepositoryInMemoryRepo repo, Nullable<int> number);
		private QueryAwardsDelegate _QueryAwards = null;
		partial void QueryAwards_Setup();
	    public IEnumerable<Awards> QueryAwards(Nullable<int> number)
		{
			if(_QueryAwards != null) { return _QueryAwards(this, number); } else { return Enumerable.Empty<Awards>(); }
		}
	
		protected delegate int MultiplyByTwoDelegate(UserRepositoryInMemoryRepo repo, Nullable<int> number);
		private MultiplyByTwoDelegate _MultiplyByTwo = null;
		partial void MultiplyByTwo_Setup();
	    public int MultiplyByTwo(Nullable<int> number)
		{
			if(_MultiplyByTwo != null) { return _MultiplyByTwo(this, number); } else { return default(int); }
		}
	
		protected delegate int MultiplyByTwoQuietDelegate(UserRepositoryInMemoryRepo repo, Nullable<int> number);
		private MultiplyByTwoQuietDelegate _MultiplyByTwoQuiet = null;
		partial void MultiplyByTwoQuiet_Setup();
	    public int MultiplyByTwoQuiet(Nullable<int> number)
		{
			if(_MultiplyByTwoQuiet != null) { return _MultiplyByTwoQuiet(this, number); } else { return default(int); }
		}
	
		partial void ResolveRelationships(ODataOperation operation, object entity);
	
		#region DataServiceUpdatableContext Overriden Members
	
		public override System.Type GetType(string containerName, string fullTypeName)
		{
			if(fullTypeName == typeof(Address).ToString()) return typeof(Address);
			if(fullTypeName == typeof(AgentAgencyAssociation).ToString()) return typeof(AgentAgencyAssociation);
			if(fullTypeName == typeof(AgentId).ToString()) return typeof(AgentId);
			if(fullTypeName == typeof(Awards).ToString()) return typeof(Awards);
			if(fullTypeName == typeof(Badges).ToString()) return typeof(Badges);
			if(fullTypeName == typeof(ContactNumber).ToString()) return typeof(ContactNumber);
			if(fullTypeName == typeof(EMailAddress).ToString()) return typeof(EMailAddress);
			if(fullTypeName == typeof(Files).ToString()) return typeof(Files);
			if(fullTypeName == typeof(FilesFileData).ToString()) return typeof(FilesFileData);
			if(fullTypeName == typeof(FilesWizardInfo).ToString()) return typeof(FilesWizardInfo);
			if(fullTypeName == typeof(LoginEntry).ToString()) return typeof(LoginEntry);
			if(fullTypeName == typeof(MultiplyByTwoResult).ToString()) return typeof(MultiplyByTwoResult);
			if(fullTypeName == typeof(Preference).ToString()) return typeof(Preference);
			if(fullTypeName == typeof(User).ToString()) return typeof(User);
			if(fullTypeName == typeof(Website).ToString()) return typeof(Website);
			if(fullTypeName == typeof(Name).ToString()) return typeof(Name);
			if(fullTypeName == typeof(ZipCode).ToString()) return typeof(ZipCode);
			return null;
		}
	
		public override void SaveEntity(ODataOperation operation, object entity)
		{
			if(operation == ODataOperation.Insert)
			{
				if(entity.GetType() == typeof(User)) { Medium.GetStorage<IUserRepository, User>().Add(entity as User); }
				if(entity.GetType() == typeof(Address)) { Medium.GetStorage<IUserRepository, Address>().Add(entity as Address); }
				if(entity.GetType() == typeof(AgentId)) { Medium.GetStorage<IUserRepository, AgentId>().Add(entity as AgentId); }
				if(entity.GetType() == typeof(ContactNumber)) { Medium.GetStorage<IUserRepository, ContactNumber>().Add(entity as ContactNumber); }
				if(entity.GetType() == typeof(EMailAddress)) { Medium.GetStorage<IUserRepository, EMailAddress>().Add(entity as EMailAddress); }
				if(entity.GetType() == typeof(Preference)) { Medium.GetStorage<IUserRepository, Preference>().Add(entity as Preference); }
				if(entity.GetType() == typeof(Website)) { Medium.GetStorage<IUserRepository, Website>().Add(entity as Website); }
				if(entity.GetType() == typeof(AgentAgencyAssociation)) { Medium.GetStorage<IUserRepository, AgentAgencyAssociation>().Add(entity as AgentAgencyAssociation); }
				if(entity.GetType() == typeof(Awards)) { Medium.GetStorage<IUserRepository, Awards>().Add(entity as Awards); }
				if(entity.GetType() == typeof(Files)) { Medium.GetStorage<IUserRepository, Files>().Add(entity as Files); }
				if(entity.GetType() == typeof(FilesFileData)) { Medium.GetStorage<IUserRepository, FilesFileData>().Add(entity as FilesFileData); }
				if(entity.GetType() == typeof(FilesWizardInfo)) { Medium.GetStorage<IUserRepository, FilesWizardInfo>().Add(entity as FilesWizardInfo); }
				if(entity.GetType() == typeof(LoginEntry)) { Medium.GetStorage<IUserRepository, LoginEntry>().Add(entity as LoginEntry); }
				if(entity.GetType() == typeof(Badges)) { Medium.GetStorage<IUserRepository, Badges>().Add(entity as Badges); }
				if(entity.GetType() == typeof(MultiplyByTwoResult)) { Medium.GetStorage<IUserRepository, MultiplyByTwoResult>().Add(entity as MultiplyByTwoResult); }
			}
			else if(operation == ODataOperation.Delete)
			{
				if(entity.GetType() == typeof(User)) { Medium.GetStorage<IUserRepository, User>().Remove(entity as User); }
				if(entity.GetType() == typeof(Address)) { Medium.GetStorage<IUserRepository, Address>().Remove(entity as Address); }
				if(entity.GetType() == typeof(AgentId)) { Medium.GetStorage<IUserRepository, AgentId>().Remove(entity as AgentId); }
				if(entity.GetType() == typeof(ContactNumber)) { Medium.GetStorage<IUserRepository, ContactNumber>().Remove(entity as ContactNumber); }
				if(entity.GetType() == typeof(EMailAddress)) { Medium.GetStorage<IUserRepository, EMailAddress>().Remove(entity as EMailAddress); }
				if(entity.GetType() == typeof(Preference)) { Medium.GetStorage<IUserRepository, Preference>().Remove(entity as Preference); }
				if(entity.GetType() == typeof(Website)) { Medium.GetStorage<IUserRepository, Website>().Remove(entity as Website); }
				if(entity.GetType() == typeof(AgentAgencyAssociation)) { Medium.GetStorage<IUserRepository, AgentAgencyAssociation>().Remove(entity as AgentAgencyAssociation); }
				if(entity.GetType() == typeof(Awards)) { Medium.GetStorage<IUserRepository, Awards>().Remove(entity as Awards); }
				if(entity.GetType() == typeof(Files)) { Medium.GetStorage<IUserRepository, Files>().Remove(entity as Files); }
				if(entity.GetType() == typeof(FilesFileData)) { Medium.GetStorage<IUserRepository, FilesFileData>().Remove(entity as FilesFileData); }
				if(entity.GetType() == typeof(FilesWizardInfo)) { Medium.GetStorage<IUserRepository, FilesWizardInfo>().Remove(entity as FilesWizardInfo); }
				if(entity.GetType() == typeof(LoginEntry)) { Medium.GetStorage<IUserRepository, LoginEntry>().Remove(entity as LoginEntry); }
				if(entity.GetType() == typeof(Badges)) { Medium.GetStorage<IUserRepository, Badges>().Remove(entity as Badges); }
				if(entity.GetType() == typeof(MultiplyByTwoResult)) { Medium.GetStorage<IUserRepository, MultiplyByTwoResult>().Remove(entity as MultiplyByTwoResult); }
			}
			
			ResolveRelationships(operation, entity);
		}
	
		#endregion
	
		#region System.IDisposable Members
	
		public void Dispose() { }
	
		#endregion
	}
}

