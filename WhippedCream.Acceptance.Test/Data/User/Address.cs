//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
namespace WhippedCream.Data.User
{
    
    [System.Data.Services.Common.DataServiceEntity]
    [System.Data.Services.Common.DataServiceKey("UserId", "AddressId")]
    public partial class Address : System.IEquatable<Address>
    {
        public Address()
        {
            this.ZipCode = new ZipCode();
        }
    
        public System.Guid UserId { get; set; }
        public System.Guid AddressId { get; set; }
        public string PrimaryAddress { get; set; }
        public string SecondaryAddress { get; set; }
        public string Suite { get; set; }
        public string POBox { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public int Type { get; set; }
    
        public ZipCode ZipCode { get; set; }
    
        public virtual User User { get; set; }
    
    	#region Members overriden from System.Object
    
    	public override bool Equals(object obj)
    	{
    		return obj is Address ? Equals(obj as Address) : false;
    	}
    
    	/// <summary>
    	/// The Implementation of this algorithm was taken
    	/// from [here](http://www.isthe.com/chongo/tech/comp/fnv/).
    	/// </summary>
    	public override int GetHashCode()
    	{
    		int hash = 13;
    		unchecked
    		{
    			hash = (hash * 16777619) ^ UserId.GetHashCode();
    			hash = (hash * 16777619) ^ AddressId.GetHashCode();
    			hash = (hash * 16777619) ^ (PrimaryAddress == null ? 0 : PrimaryAddress.GetHashCode());
    			hash = (hash * 16777619) ^ (SecondaryAddress == null ? 0 : SecondaryAddress.GetHashCode());
    			hash = (hash * 16777619) ^ (Suite == null ? 0 : Suite.GetHashCode());
    			hash = (hash * 16777619) ^ (POBox == null ? 0 : POBox.GetHashCode());
    			hash = (hash * 16777619) ^ (City == null ? 0 : City.GetHashCode());
    			hash = (hash * 16777619) ^ (State == null ? 0 : State.GetHashCode());
    			hash = (hash * 16777619) ^ Type.GetHashCode();
    			hash = (hash * 16777619) ^ (ZipCode == null ? 0 : ZipCode.GetHashCode());
    		}
    		return hash;
    	}
    
    	public override string ToString()
    	{
    		return base.ToString();
    	}
    
    	#endregion
    
    	#region IEquatable<Address> Members
    
    	public bool Equals(Address rhs)
    	{
    		if(rhs == null)
    			return false;
    			
    		return System.Collections.Generic.EqualityComparer<Address>.Equals(UserId, rhs.UserId) && System.Collections.Generic.EqualityComparer<Address>.Equals(AddressId, rhs.AddressId) && System.Collections.Generic.EqualityComparer<Address>.Equals(PrimaryAddress, rhs.PrimaryAddress) && System.Collections.Generic.EqualityComparer<Address>.Equals(SecondaryAddress, rhs.SecondaryAddress) && System.Collections.Generic.EqualityComparer<Address>.Equals(Suite, rhs.Suite) && System.Collections.Generic.EqualityComparer<Address>.Equals(POBox, rhs.POBox) && System.Collections.Generic.EqualityComparer<Address>.Equals(City, rhs.City) && System.Collections.Generic.EqualityComparer<Address>.Equals(State, rhs.State) && System.Collections.Generic.EqualityComparer<Address>.Equals(Type, rhs.Type) && System.Collections.Generic.EqualityComparer<Address>.Equals(ZipCode, rhs.ZipCode);
    	}
    
    	#endregion
    }
}
