


//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WhippedCream.Data.User
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    using WhippedCream;
    
    public partial class UserRepository : DbContext, IUserRepository, IRepositoryContext
    {
    	private static ObjectContext GetContext(WhippedCream.EntityFrameworkDataLayer.IEntityFrameworkInitializerMap map)
    	{
    		var initializer = map.GetInitializer<IUserRepository>();
    		ObjectContext result = new ObjectContext(initializer.GenerateConnectionString());
    		result.DefaultContainerName = initializer.DefaultContainerName;
    		return result;
    	}
    
        public UserRepository(WhippedCream.EntityFrameworkDataLayer.IEntityFrameworkInitializerMap map)
            : base(GetContext(map), true)
        {
    		this.Configuration.ProxyCreationEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<User> Users { get; set; }
        public DbSet<Address> Addresses { get; set; }
        public DbSet<AgentId> AgentIds { get; set; }
        public DbSet<ContactNumber> ContactNumbers { get; set; }
        public DbSet<EMailAddress> EMailAddresses { get; set; }
        public DbSet<Preference> Preferences { get; set; }
        public DbSet<Website> Websites { get; set; }
        public DbSet<AgentAgencyAssociation> AgentAgencyAssociations { get; set; }
        public DbSet<Awards> Awards { get; set; }
        public DbSet<Files> Files { get; set; }
        public DbSet<FilesFileData> FilesFileDatas { get; set; }
        public DbSet<FilesWizardInfo> FilesWizardInfoes { get; set; }
        public DbSet<LoginEntry> LoginEntries { get; set; }
        public DbSet<Badges> Badges { get; set; }
        public DbSet<MultiplyByTwoResult> MultiplyByTwoResults { get; set; }
    
        public virtual ObjectResult<Awards> QueryAwards(Nullable<int> number)
        {
            var numberParameter = number.HasValue ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Awards>("QueryAwards", numberParameter);
        }
    
        public virtual ObjectResult<Awards> QueryAwards(Nullable<int> number, MergeOption mergeOption)
        {
            var numberParameter = number.HasValue ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Awards>("QueryAwards", mergeOption, numberParameter);
        }
    
        public virtual int MultiplyByTwo(Nullable<int> number)
        {
            var numberParameter = number.HasValue ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MultiplyByTwo", numberParameter);
        }
    
        public virtual int MultiplyByTwoQuiet(Nullable<int> number)
        {
            var numberParameter = number.HasValue ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MultiplyByTwoQuiet", numberParameter);
        }
    
    	#region IUserRepository Members
    
        IQueryable<User> IUserRepository.Users { get { return Users.AsQueryable(); } }
        IQueryable<Address> IUserRepository.Addresses { get { return Addresses.AsQueryable(); } }
        IQueryable<AgentId> IUserRepository.AgentIds { get { return AgentIds.AsQueryable(); } }
        IQueryable<ContactNumber> IUserRepository.ContactNumbers { get { return ContactNumbers.AsQueryable(); } }
        IQueryable<EMailAddress> IUserRepository.EMailAddresses { get { return EMailAddresses.AsQueryable(); } }
        IQueryable<Preference> IUserRepository.Preferences { get { return Preferences.AsQueryable(); } }
        IQueryable<Website> IUserRepository.Websites { get { return Websites.AsQueryable(); } }
        IQueryable<AgentAgencyAssociation> IUserRepository.AgentAgencyAssociations { get { return AgentAgencyAssociations.AsQueryable(); } }
        IQueryable<Awards> IUserRepository.Awards { get { return Awards.AsQueryable(); } }
        IQueryable<Files> IUserRepository.Files { get { return Files.AsQueryable(); } }
        IQueryable<FilesFileData> IUserRepository.FilesFileDatas { get { return FilesFileDatas.AsQueryable(); } }
        IQueryable<FilesWizardInfo> IUserRepository.FilesWizardInfoes { get { return FilesWizardInfoes.AsQueryable(); } }
        IQueryable<LoginEntry> IUserRepository.LoginEntries { get { return LoginEntries.AsQueryable(); } }
        IQueryable<Badges> IUserRepository.Badges { get { return Badges.AsQueryable(); } }
        IQueryable<MultiplyByTwoResult> IUserRepository.MultiplyByTwoResults { get { return MultiplyByTwoResults.AsQueryable(); } }
    
        IEnumerable<Awards> IUserRepository.QueryAwards(Nullable<int> number)
        {
            return QueryAwards(number);
        }
    
        int IUserRepository.MultiplyByTwo(Nullable<int> number)
        {
            return MultiplyByTwo(number);
        }
    
        int IUserRepository.MultiplyByTwoQuiet(Nullable<int> number)
        {
            return MultiplyByTwoQuiet(number);
        }
    
    	#endregion
        
        #region IRepositoryContext Members
    
    	void IRepositoryContext.AddObject(string entitySetName, object entity)
    	{
    		(this as IObjectContextAdapter).ObjectContext.AddObject(entitySetName, entity);
    	}
    
    	void IRepositoryContext.DeleteObject(object entity)
    	{
    		(this as IObjectContextAdapter).ObjectContext.DeleteObject(entity);
    	}
    
        void IRepositoryContext.SaveChanges()
        {
        	SaveChanges();
        }
    
    	void IRepositoryContext.LoadProperty(object entity, string propertyName)
    	{
    		(this as IObjectContextAdapter).ObjectContext.LoadProperty(entity, propertyName);
    	}
        
        #endregion
    }
}
