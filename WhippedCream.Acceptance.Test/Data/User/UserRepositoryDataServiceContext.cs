




//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WhippedCream.Data.User
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Data.Services;
    using Microsoft.Practices.Unity;
    using System.Data.Services.Common;
    using System.ServiceModel.Web;
    using System.Data.Services.Client;
    using WhippedCream;
    
    public partial class UserRepositoryDataServiceContext : DataServiceContext, IUserRepository, IRepositoryContext
    {
        public UserRepositoryDataServiceContext(IUrlService urlService) : base(urlService.GetServiceUri("UserRepository")) { }
    
        public IQueryable<User> Users { get { return this.CreateQuery<User>("Users"); } }
        public IQueryable<Address> Addresses { get { return this.CreateQuery<Address>("Addresses"); } }
        public IQueryable<AgentId> AgentIds { get { return this.CreateQuery<AgentId>("AgentIds"); } }
        public IQueryable<ContactNumber> ContactNumbers { get { return this.CreateQuery<ContactNumber>("ContactNumbers"); } }
        public IQueryable<EMailAddress> EMailAddresses { get { return this.CreateQuery<EMailAddress>("EMailAddresses"); } }
        public IQueryable<Preference> Preferences { get { return this.CreateQuery<Preference>("Preferences"); } }
        public IQueryable<Website> Websites { get { return this.CreateQuery<Website>("Websites"); } }
        public IQueryable<AgentAgencyAssociation> AgentAgencyAssociations { get { return this.CreateQuery<AgentAgencyAssociation>("AgentAgencyAssociations"); } }
        public IQueryable<Awards> Awards { get { return this.CreateQuery<Awards>("Awards"); } }
        public IQueryable<Files> Files { get { return this.CreateQuery<Files>("Files"); } }
        public IQueryable<FilesFileData> FilesFileDatas { get { return this.CreateQuery<FilesFileData>("FilesFileDatas"); } }
        public IQueryable<FilesWizardInfo> FilesWizardInfoes { get { return this.CreateQuery<FilesWizardInfo>("FilesWizardInfoes"); } }
        public IQueryable<LoginEntry> LoginEntries { get { return this.CreateQuery<LoginEntry>("LoginEntries"); } }
        public IQueryable<Badges> Badges { get { return this.CreateQuery<Badges>("Badges"); } }
        public IQueryable<MultiplyByTwoResult> MultiplyByTwoResults { get { return this.CreateQuery<MultiplyByTwoResult>("MultiplyByTwoResults"); } }
    
        public IEnumerable<Awards> QueryAwards(Nullable<int> number)
        {
            ICollection<UriOperationParameter> parameters = new List<UriOperationParameter>();
     
            if(number != null) { parameters.Add(new UriOperationParameter("number", number)); }
            return this.Execute<Awards>(new Uri("QueryAwards", UriKind.Relative), "GET", false, parameters.ToArray());
        }
    
        public int MultiplyByTwo(Nullable<int> number)
        {
            ICollection<UriOperationParameter> parameters = new List<UriOperationParameter>();
     
            if(number != null) { parameters.Add(new UriOperationParameter("number", number)); }
            return this.Execute<int>(new Uri("MultiplyByTwo", UriKind.Relative), "GET", true, parameters.ToArray()).First();
        }
    
        public int MultiplyByTwoQuiet(Nullable<int> number)
        {
            ICollection<UriOperationParameter> parameters = new List<UriOperationParameter>();
     
            if(number != null) { parameters.Add(new UriOperationParameter("number", number)); }
            return this.Execute<int>(new Uri("MultiplyByTwoQuiet", UriKind.Relative), "GET", true, parameters.ToArray()).First();
        }
        
        #region System.IDisposable Members
    
        public void Dispose() { }
    
        #endregion
    
        #region IRepositoryContext Members
    
        void IRepositoryContext.SaveChanges()
        {
            SaveChanges();
        }
    
        void IRepositoryContext.LoadProperty(object entity, string propertyName)
        {
            LoadProperty(entity, propertyName);
        }
    
        #endregion
    }
}

