//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
namespace WhippedCream.Data.User
{
    
    [System.Data.Services.Common.DataServiceEntity]
    [System.Data.Services.Common.DataServiceKey("UserId", "BadgeId")]
    public partial class Badges : System.IEquatable<Badges>
    {
        public System.Guid UserId { get; set; }
        public System.Guid BadgeId { get; set; }
        public Nullable<int> Type { get; set; }
        public Nullable<System.DateTime> DateReceived { get; set; }
        public string Description { get; set; }
    
        public virtual User User { get; set; }
    
    	#region Members overriden from System.Object
    
    	public override bool Equals(object obj)
    	{
    		return obj is Badges ? Equals(obj as Badges) : false;
    	}
    
    	/// <summary>
    	/// The Implementation of this algorithm was taken
    	/// from [here](http://www.isthe.com/chongo/tech/comp/fnv/).
    	/// </summary>
    	public override int GetHashCode()
    	{
    		int hash = 13;
    		unchecked
    		{
    			hash = (hash * 16777619) ^ UserId.GetHashCode();
    			hash = (hash * 16777619) ^ BadgeId.GetHashCode();
    			hash = (hash * 16777619) ^ (Type == null ? 0 : Type.GetHashCode());
    			hash = (hash * 16777619) ^ (DateReceived == null ? 0 : DateReceived.GetHashCode());
    			hash = (hash * 16777619) ^ (Description == null ? 0 : Description.GetHashCode());
    		}
    		return hash;
    	}
    
    	public override string ToString()
    	{
    		return base.ToString();
    	}
    
    	#endregion
    
    	#region IEquatable<Badges> Members
    
    	public bool Equals(Badges rhs)
    	{
    		if(rhs == null)
    			return false;
    			
    		return System.Collections.Generic.EqualityComparer<Badges>.Equals(UserId, rhs.UserId) && System.Collections.Generic.EqualityComparer<Badges>.Equals(BadgeId, rhs.BadgeId) && System.Collections.Generic.EqualityComparer<Badges>.Equals(Type, rhs.Type) && System.Collections.Generic.EqualityComparer<Badges>.Equals(DateReceived, rhs.DateReceived) && System.Collections.Generic.EqualityComparer<Badges>.Equals(Description, rhs.Description);
    	}
    
    	#endregion
    }
}
