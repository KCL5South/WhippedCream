using System.Collections.Generic;
using System.Collections.Concurrent;
using Microsoft.Practices.Unity;
using WhippedCream.DataServiceDataLayer;
using WhippedCream.InMemoryDataLayer;
namespace WhippedCream
{
	/*
                              ###                                
                        ## # # # # ###                          
                       #              ##                        
                     ##                ###                      
                     #                    #                     
                     # #######             #                    
                     ###      #          #  #                   
                     ##      #              ##                  
                       #   ##            #   #                  
                        ###                  #                  
                     ###                      #                 
                 ####                          ###              
                #                                 ##            
                #                    # # #          #           
               #                                     #          
              ## # # # # #     # #                   #          
            ##                                       #          
            #                              #         #          
            #                                        #          
            #  #                   # # #              ##        
            ##                                          #       
          ##                                   #         #      
         #                                       #        #     
         #                                                #     
         #                                                 #    
        ##                                                #     
         #                                               ##     
         ##                                             ###     
         #####  ####                            ######### #     
                 #  ##########################            
	*/

	/// <summary>
	/// Welcome to Whipped Cream.
	/// 
	/// This object represents the Whipped Cream Data Layer Engine.
	/// </summary>
	public class WhippedCreamDataLayer : IWhippedCreamDataLayer, 
										 IRepositoryFactory,
										 IRepositoryContextFactory
	{
		/// <summary>
		/// Gets the <see cref="IUnityContainer"/> object that will be used thoroughout the lifetime of this data layer.
		/// </summary>
		public static IUnityContainer Container { get; internal set; }

		/// <summary>
		/// A syncronization tocken used to make sure that concurrent processes don't conflict with each other.
		/// </summary>
		private object _syncObject = new object();

		/// <summary>
		/// Call this method to setup Whipped Cream before you application uses it.
		/// </summary>
		/// <param name="container">A <see cref="IUnityContainer"/> used for Dependency Injection within Whipped Cream.</param>
		/// <param name="baseUri">You need to supply a <see cref="System.Uri"/> that is the base uri for all services
		/// generated by Whipped Cream.</param>
		/// <exception cref="System.ArgumentNullException">Thrown if <paramref name="container"/> is null.</exception>
		/// <exception cref="System.ArgumentNullException">Thrown if <paramref name="baseUri"/> is null.</exception>
		public static void Bootstrap(IUnityContainer container, System.Uri baseUri)
		{
			Bootstrap(container, baseUri, null);
		}

		/// <summary>
		/// Call this method to setup Whipped Cream before you application uses it.
		/// </summary>
		/// <param name="container">A <see cref="IUnityContainer"/> used for Dependency Injection within Whipped Cream.</param>
		/// <param name="baseUri">You need to supply a <see cref="System.Uri"/> that is the base uri for all services
		/// generated by Whipped Cream.</param>
		/// <param name="servicePrefix">If you wish your Repository services to have a prefix you can supply it.</param>
		/// <exception cref="System.ArgumentNullException">Thrown if <paramref name="container"/> is null.</exception>
		/// <exception cref="System.ArgumentNullException">Thrown if <paramref name="baseUri"/> is null.</exception>
		public static void Bootstrap(IUnityContainer container, System.Uri baseUri, string servicePrefix)
		{
			if(container == null)
				throw new System.ArgumentNullException("container");
			if(baseUri == null)
				throw new System.ArgumentNullException("baseUri");

			Container = container;

			WhippedCreamDataLayer dataLayerAndRepositoryContainer = new WhippedCreamDataLayer();

			container.RegisterInstance<IWhippedCreamDataLayer>(dataLayerAndRepositoryContainer);
			container.RegisterInstance<IRepositoryFactory>(dataLayerAndRepositoryContainer);
			container.RegisterInstance<IRepositoryContextFactory>(dataLayerAndRepositoryContainer);
			container.RegisterInstance<IInMemoryPersistentMedium>(new InMemoryPersistentMedium());
			container.RegisterInstance<IUrlService>(new DefaultUrlService(baseUri, servicePrefix));
		}
		
		/// <summary>
		/// A collection of registered repository descriptions.
		/// </summary>
		internal IDictionary<System.Type, IRepositoryDescription> RepositoryDescriptions { get; private set; }

		/// <summary>
		/// Constructor.  It's internal, because we don't want to be able to create one outside 
		/// of this assembly since it contains the flag signifying what state the data layer is in.
		/// Multiple instance of this object would confuse the user.
		/// </summary>
		internal WhippedCreamDataLayer()
		{
			(this as IWhippedCreamDataLayer).State = DataLayerState.Live;
			RepositoryDescriptions = new ConcurrentDictionary<System.Type, IRepositoryDescription>();
		}

		/// <summary>
		/// This method is used by Whipped Cream to register repository descriptions in
		/// it's internal collection of descriptions.
		/// </summary>
		/// <typeparam name="TRepo">The type of repository to register.</typeparam>
		internal void RegisterRepository<TRepo>()
		{
			lock(_syncObject)
			{
				if (!RepositoryDescriptions.ContainsKey(typeof(TRepo)))
					RepositoryDescriptions.Add(typeof(TRepo), new RepositoryDescription<TRepo>());
			}
		}

		#region IWhippedCreamDataLayer Members

		DataLayerState IWhippedCreamDataLayer.State { get; set; }

		string IWhippedCreamDataLayer.GetServiceUrl<TRepo>()
		{
			RegisterRepository<TRepo>();
			IRepositoryDescription desc = RepositoryDescriptions[typeof(TRepo)];
			IUrlService urlService = Container.Resolve<IUrlService>();

			return urlService.GetServiceUrl(desc.ServicePath);
		}

		System.Uri IWhippedCreamDataLayer.GetServiceUri<TRepo>()
		{
			RegisterRepository<TRepo>();
			IRepositoryDescription desc = RepositoryDescriptions[typeof(TRepo)];
			IUrlService urlService = Container.Resolve<IUrlService>();

			return urlService.GetServiceUri(desc.ServicePath);
		}

		System.ServiceModel.ServiceHost IWhippedCreamDataLayer.GetServiceHost<TRepo>()
		{
			RegisterRepository<TRepo>();
			IRepositoryDescription desc = RepositoryDescriptions[typeof(TRepo)];
			IWhippedCreamDataLayer dl = this;

			if(desc.ServiceType == null)
				throw new System.InvalidOperationException(string.Format("Unable to create a service host because a service was not registered with repository {0}", typeof(TRepo)));

			return new WhippedCreamDataServiceHost(Container, desc.ServiceType, dl.GetServiceUri<TRepo>());
		}

		IRepositoryDescription IWhippedCreamDataLayer.GetRepositoryDescription<TRepo>()
		{
			RegisterRepository<TRepo>();
			return RepositoryDescriptions[typeof(TRepo)];
		}

		#endregion

		#region IRepositoryFactory Members

		TRepo IRepositoryFactory.CreateRepository<TRepo>()
		{
			RegisterRepository<TRepo>();

			IRepositoryDescription desc = RepositoryDescriptions[typeof(TRepo)];
			IWhippedCreamDataLayer dl = this;

			if (desc.Repositories.ContainsKey(dl.State))
				return Container.Resolve(desc.Repositories[dl.State]) as TRepo;
			else
				return null;
		}

		#endregion

		#region IRepositoryContextFactory Members

		TRepo IRepositoryContextFactory.CreateRepository<TRepo>()
		{
			RegisterRepository<TRepo>();

			IRepositoryDescription desc = RepositoryDescriptions[typeof(TRepo)];
			IWhippedCreamDataLayer dl = this;

			if (desc.RepositoryContexts.ContainsKey(dl.State))
				return Container.Resolve(desc.RepositoryContexts[dl.State]) as TRepo;
			else
				return null;
		}

		#endregion
	}
}
